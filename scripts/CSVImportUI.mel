//
// CSV File Animation Loader 2.0
// by Gabe Montague - gmontague[at]college.harvard.edu
//

source "CSVImportFunctionMatrix";

// -- DATA MODEL --

global string $defaultCSV;
global string $defaultStartColumn;
global string $defaultObject;
global string $defaultOffsets;
global string $defaultAxisRotation;

// Converts a 2D index into a 1D one for the mapping array
proc int mapInd(int $row, int $column) {
    return (5 * ($row - 1) + ($column - 1));
}

// Data model for mappings, contains cells as strings in form: [`mapInd(row, column)`],
global string $gMappingTableStrings[];

// Number of rows in the mapping table
global int $gMappingTableRows;

// Data model for options
global float $gCsvFileFps;
global string $gCsvMode;

// Procedure to reset the data model
global proc csvDataModelReset() {

    global string $defaultCSV;
    global string $defaultOffsets;
    global string $defaultObject;
    global string $defaultStartColumn;
    global string $defaultAxisRotation;
    
    global string $gMappingTableStrings[];
    global int $gMappingTableRows;
    global float $gCsvFileFps;
    global string $gCsvMode;
    
    // Reset mapping table model
    clear($gMappingTableStrings);
    
    $defaultCSV = "example.csv";
    $defaultObject = "upperArm";
    $defaultOffsets = "180,0,0";
    $defaultStartColumn = 1;
    $defaultAxisRotation = 0;
    
    $gMappingTableStrings[0] = $defaultCSV;
    $gMappingTableStrings[1] = $defaultObject;
    $gMappingTableStrings[2] = $defaultOffsets;
    $gMappingTableStrings[3] = $defaultStartColumn;
    $gMappingTableStrings[4] = $defaultAxisRotation;
    
    $gMappingTableRows = 1;
    
    // Reset options
    $gCsvFileFps = 200;
    $gCsvMode = "set";
}

// Initiate global data if not present by resetting
if (size($gMappingTableStrings) == 0 || $gMappingTableRows == 0) {
    
    csvDataModelReset();
}


// -- UI CALLBACKS --

// Referenced in multiple procedures
global string $gMappingTable;
global string $gCsvFileFpsFloatField;

// Carries out the functionality of animating
global proc runCSVImport() {
    
    global string $gMappingTableStrings[];
    global int $gMappingTableRows;
    global float $gCsvFileFps;
    
    // Cycle through rows
    for ($i = 1; $i <= $gMappingTableRows; ++$i) {
        
        $csvFile = $gMappingTableStrings[mapInd($i, 1)];
        $object = $gMappingTableStrings[mapInd($i, 2)];
        $offsetString = $gMappingTableStrings[mapInd($i, 3)];
        int $startColumn = $gMappingTableStrings[mapInd($i, 4)];
        float $axisRotation = $gMappingTableStrings[mapInd($i, 5)];
        
        print("Keyframing for " + $object + "..\n");
        $offsets = $currentValues = stringToStringArray($offsetString,",");
        if (size($offsets) < 3) {
            error("Failed to animate: Specify rotation offset as 3 values separated by commas.");
            return;
        }
        
        if ($startColumn < 1) error("Failed to animate: Start column must be greater than 0.");
        
        keyframeFromCSVMatrix($csvFile, $object, $gCsvFileFps,
                              $offsets[0], $offsets[1], $offsets[2],
                              $startColumn - 1, $axisRotation);
    }
    
    print("Keyframing complete. See console for details.\n");
}

// Callback for getting a mapping table cell
global proc string csvMappingsGetCell(int $row, int $column) {

    global string $gMappingTableStrings[];
    
    // Calculate index
    int $index = mapInd($row, $column);
    
    // Check bounds
    $size = size($gMappingTableStrings);
    if ($index >= $size) {
        return "";
    }
    else {
        // If in bounds, then return the value
        return $gMappingTableStrings[$index];
    }
}

// Callback for editing a mapping table cell
global proc int csvMappingsCellChanged(int $row, int $column, string $value) {
    
    global string $gMappingTable;
    global string $gMappingTableStrings[];
    
    // Whether the change should be allowed
    int $shouldAllow = true;
    
    switch($column) {

    case 1:
    
        // Make sure input includes an extension 
        
        // Search for a '.'
        $matchResult = `match "\\."$value`;
        $size = `size $matchResult`;
        
        // Add .csv if no extension
        if ($size == 0) {
            
            // Modify the data model to append the .csv extension
            $value += ".csv";
        }
        break;
         
    case 2:
    
        // Validate object name
        $resultNum = size(`ls ($value)`);
        
        if ($resultNum == 0) {
            
            // Display a warning if not a real object
            warning("No object of name: " + $value + " can be found in the current scene.");
        }
        
        break;
    }
    
    // Allow or disallow the change (manually)
    if ($shouldAllow) {
        
        // Commit the change to the data model
        $gMappingTableStrings[mapInd($row, $column)] = $value;
        
        // Update the row by 'clearing' it
        scriptTable -edit -clearRow $row $gMappingTable;
    }
    
    // Never allow or else changes are overridden
    return false;
}

// Callback for inserting a new row
global proc csvMappingsInsertRow() {
    
    global string $gMappingTable;
    global string $gMappingTableStrings[];
    global int $gMappingTableRows;
    
    global string $defaultCSV;
    global string $defaultObject;
    global string $defaultOffsets;
    global string $defaultStartColumn;
    global string $defaultAxisRotation;
    
    // Get the row to insert (after the selected one or after the last one)
    int $insertRow = `scriptTable -query -selectedRow $gMappingTable` + 1;
    if ($insertRow == 1) $insertRow = $gMappingTableRows + 1;
    
    // Copy down the data from the row above if there is one
    if ($gMappingTableRows > 0) {
        for ($i = 1; $i <= 5; ++$i) {
            
            $value = $gMappingTableStrings[mapInd($insertRow - 1, $i)];
            $gMappingTableStrings[mapInd($insertRow, $i)] = $value;
        }        
    }
    
    // Otherwise, use the default fill-in
    else {
        $gMappingTableStrings[0] = $defaultCSV;
        $gMappingTableStrings[1] = $defaultObject;
        $gMappingTableStrings[2] = $defaultOffsets;
        $gMappingTableStrings[3] = $defaultStartColumn;
        $gMappingTableStrings[4] = $defaultAxisRotation;
    }
    
    // Increment the row count
    ++$gMappingTableRows;
    
    // Insert the row in the script table
    scriptTable -edit -insertRow ($insertRow) $gMappingTable;
}

// Callback for removing a row
global proc csvMappingsRemoveRow() {
    
    global string $gMappingTable;
    global int $gMappingTableRows;

    // If there are no rows return
    if ($gMappingTableRows == 0) return;
    
    // Get the selected row
    int $selectedRow = `scriptTable -query -selectedRow $gMappingTable`;
    
    // If there is no selected row, remove the last one
    if ($selectedRow == 0) {
        $selectedRow = $gMappingTableRows;
    }
    
    // Decrement the row count
    --$gMappingTableRows;
    
    // Insert the row in the script table
    scriptTable -edit -deleteRow ($selectedRow) $gMappingTable;
}

// Called when the CSV FPS changes
global proc csvFpsChanged() {
    
    global float $gCsvFileFps;
    global string $gCsvFileFpsFloatField;
    $gCsvFileFps = `floatField -query -value ($gCsvFileFpsFloatField)`;
}

// Resets the data model and the window
global proc resetMenuItemSelected() {
    
    // Reset the data
    csvDataModelReset();
    
    // Reload the window
    deleteUI -window csvImportWindow;
    showCSVImportWindow();
}



// -- MAIN UI PROCEDURES --

// Displays the CSV import window
global proc showCSVImportWindow() {

    global int $gMappingTableRows;
    global float $gCsvFileFps;
    global string $gCsvMode;
    
    global string $gMappingTable;
    global string $gCsvFileFpsFloatField;

    // Delete the window if already open
    if (`window -exists csvImportWindow`) {
        deleteUI -window csvImportWindow;
    }
    
    // Create main window
    window -title "Import CSV Data" -widthHeight 401 400 -sizeable no
        -menuBar true -menuBarVisible yes csvImportWindow;
        columnLayout -adjustableColumn yes;
        
            // Menu bar
            menu -label "Edit";
                menuItem -label "Reset" -command "resetMenuItemSelected";
                //menuItem -label "Load Configuration File";
                //menuItem -label "Save Configuration File";
            menu -label "Help" -helpMenu true;
                menuItem -label "About CSV Data Importer";
        
            // Top scroll view
            scrollLayout -width 397 -height 348 -childResizable yes;
                columnLayout -adjustableColumn yes;
                
                    // Mappings
                    frameLayout -label "Mappings" -collapsable yes -collapse no;
                        columnLayout -adjustableColumn yes;
                        
                            // Mappings table
                            $gMappingTable = `scriptTable -rows ($gMappingTableRows) -columns 5 -height 210
                            -label 1 "CSV Filename"
                            -columnWidth 1 80
                            -label 2 "Object Name"
                            -columnWidth 2 80
                            -label 3 "Rot. Offsets"
                            -columnWidth 3 40
                            -label 4 "Start Col."
                            -columnWidth 4 30
                            -label 5 "Axis Rotation"
                            -columnWidth 5 30
                            
                            -cellChangedCmd ("csvMappingsCellChanged")
                            -getCellCmd ("csvMappingsGetCell")`;
                        
                            // Mapping table editing buttons
                            columnLayout -width 100 -columnAlign "center"
                            -columnAttach "both" 1;
                                button -height 17 -label "Insert" -command ("csvMappingsInsertRow");
                                button -height 17 -label "Remove" -command ("csvMappingsRemoveRow");
                            setParent ..;
                        setParent ..;
                    setParent ..;
                    
                    // Options
                    frameLayout -label "Options" -collapsable yes -collapse no;
                        columnLayout -adjustableColumn yes;
                        
                            // Mode
                            /*rowLayout -numberOfColumns 4 -height 22 -columnAlign4 "right" "left" "left" "left"
                            -columnWidth 1 131 -cw 2 50 -cw 3 50 -cw 4 100 
                            -columnAttach4 "both" "both" "both" "both"
                            -rowAttach 1 "both" 1 -rat 2 "both" 1 -rat 3 "both" 1 -rat 4 "both" 1;
                                text -label "Mode:   ";
                                radioCollection;
                                radioButton -label "Set" -onCommand ("$gCsvMode = \"set\"") -select;
                                radioButton -label "Add" -onCommand ("$gCsvMode = \"add\"");
                                radioButton -label "Multiply" -onCommand ("$gCsvMode = \"multiply\"");
                            setParent ..;*/
                            
                            // Time-scale factor
                            rowLayout -numberOfColumns 2 -height 22 -columnAlign2 "right" "left"
                            -columnWidth 1 131 -cw 2 50
                            -columnAttach2 "both" "both"
                            -rowAttach 1 "both" 1 -rat 2 "both" 1;
                                text -label "CSV FPS:   ";
                                $gCsvFileFpsFloatField = `floatField -value ($gCsvFileFps) -width 100 -minValue 24.0
                                -changeCommand ("csvFpsChanged")`;
                            setParent ..;
                        setParent ..;
                    setParent ..;
                setParent ..;
            setParent ..;
            
            // Bottom buttons
            rowLayout -numberOfColumns 3 -height 30 -columnAlign3 "center" "center" "center"
            -columnWidth 1 131 -cw 2 130 -cw 3 131
            -columnAttach3 "both" "both" "both"
            -rowAttach 1 "both" 1 -rat 2 "both" 1 -rat 3 "both" 1;
                button -label "Animate" -command ("deleteUI -window csvImportWindow; runCSVImport;");
                button -label "Apply" -command ("runCSVImport");
                button -label "Close" -command ("deleteUI -window csvImportWindow");
            setParent ..;
        setParent ..;
    showWindow csvImportWindow;
}
showCSVImportWindow;